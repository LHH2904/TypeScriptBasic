cài đặt thư viện:
npm install -g typescript
kiểm tra phiên bản compiler
tsc --v

trỏ đến foder chứa file ts để compiler sang js
tsc .\lesson3\lesson3.ts

chạy file js
node .\lesson3\lesson3.js

Tại sao lại dùng TypeScript?
Với hệ thống Types:kiểu => hạn chế bugs khi khối lượng dòng code lớn (các project lớn,
nhiều thành viên tham gia)

js là ngôn ngữ với type động(có thể thay đổi kiểu dữ liệu)
ví dụ:
let name = 'abc'; typeof === string
name = 35; typeof === number
name = false; typeof === boolean

dynamic types (vấn đề) => cho ra sai kết quả nếu truyền vào sai types => cần code bổ sung validate
dùng typescript hạn chế bug

type gồm 2 loại: keyword 'type' và datatypes(kiểu dữ liệu)
việc định nghĩa kiểu dữ liệu sẽ nói cho chúng ta biết biến số (variable) có những
thuộc tính và functions nào
ví dụ:
const name = 'Hello' // data-type === String

Các loại data-types với Typescript
tương tự JS
- Dữ liệu nguyên thủy (Primitive): String, number, boolean, null, undefined,symbol, bigint
- Dữ liệu tham chiếu (References): Objects, Array, Functions

TypeScript sử dụng cú pháp:
:type sau khi định nghĩa biến. Một khi đã khai báo type sẽ không thể thay đổi nó (static type)
Ví dụ:
let variableName:type; =>khai báo 1 biến, định nghĩa type, nhưng chưa khởi tạo giá trị
let variableName:type = value; =>khai báo 1 biến, định nghĩa type, và gán giá trị khởi tạo

const constantName:type = value;

Object
có 2 cách khai báo object
:object hoặc {}

Array
cú pháp let arrayName: type[]
ví dụ: let skills:string[];
skills[0]='avc';
skills[1]=25; //error
skills.push('EDS'); //ok

với js
let skills = ['HTML','CSS','TYPESCRIPT'];
=> ts sẽ tự đoán và định nghĩa kiểu type
let skills:string[] = ['HTML','CSS','TYPESCRIPT'];
skills.push(34); //error

Lưu trữ "mixed type"
let skills = ['HTML','CSS','TYPESCRIPT',34,21];
=> TS sẽ đoán gồm type string hoặc number
let skills:(string|number)[] = ['HTML','CSS','TYPESCRIPT',34,21];
lưu ý:
- Nếu muốn Array chỉ có 1 kiểu dữ liệu thi dùng type[]
- Nếu muốn Array có nhiều loại dữ liệu trở lên thi dùng (type|type|...)[]

Tuple
Hoạt động giống array, tuy nhiên có vài quy định bắt buộc:
- Số phần tử của tuple cần được khai báo trước(cố định)
- Type của từng phần tử trong array cần được khai báo trước và không nhất thiết phải giống nhau
=> giúp định nghĩa 1 mảng hay 1 biến mà ở đó
có thể quy định được kiểu giá trị, trình tự, kích thước của biến đó
Ví dụ:
let skills = ['Languages',5];
=> let skills: [string,number] = ['Languages',5];
Với Tuple thứ tự phần tử rất quan trọng
let skills: [string,number];
skills = [5,'Languages']; //error

